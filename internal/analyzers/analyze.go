package analyzers

import (
	"context"
	"fmt"
	"os"
	"strings"
	"vuln-scanner/internal/gitutil"
	utils "vuln-scanner/utils/util"

	"github.com/rs/zerolog/log"
)

var analyzes []Analyzer = []Analyzer{
	NewSecretsAnalyzer(),
}

func AnalyzeRepo(ctx context.Context, repoURL string) (string, error) {
	dir, err := gitutil.Clone(repoURL)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: %v", err)
	}
	defer os.RemoveAll(dir)

	repoName := utils.ExtractRepoName(repoURL)

	branches, err := gitutil.GetBranches(dir)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ç–æ–∫: %w", err)
	}

	var fullReport strings.Builder
	fullReport.WriteString(fmt.Sprintf("–ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è `%s` –ø–æ –≤—Å–µ–º –≤–µ—Ç–∫–∞–º:\n\n", repoName))

	for _, branch := range branches {
		// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–µ—Ç–∫—É
		if err := gitutil.CheckoutBranch(dir, branch); err != nil {
			log.Warn().Msgf("–Ω–µ —É–¥–∞–ª–æ—Å—å —á–µ–∫-–∞—É—Ç–∏—Ç—å –≤–µ—Ç–∫—É %s: %v", branch, err)
			continue
		}

		fullReport.WriteString(fmt.Sprintf("–í–µ—Ç–∫–∞ `%s`:\n", branch))

		for _, analyzer := range analyzes {
			log.Info().Msgf("–∑–∞–ø—É—Å–∫ %q –Ω–∞ –≤–µ—Ç–∫–µ %s", analyzer.Name(), branch)
			res, err := analyzer.Run(repoName, dir)
			if err != nil {
				fullReport.WriteString(fmt.Sprintf("%s: –æ—à–∏–±–∫–∞: %v\n\n", analyzer.Name(), err))
				continue
			}
			// –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
			fullReport.WriteString(res + "\n")
		}
		fullReport.WriteString("\n")
	}

	report := fullReport.String()
	if strings.TrimSpace(report) == fmt.Sprintf("üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è `%s` –ø–æ –≤—Å–µ–º –≤–µ—Ç–∫–∞–º:", repoName) {
		// –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
		return "–°–µ–∫—Ä–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≤–µ—Ç–∫–µ", nil
	}

	return report, nil
}
